package keystrokesmod.module.impl.exploit;

import keystrokesmod.event.network.ClientBrandEvent;
import keystrokesmod.event.network.SendPacketEvent;
import keystrokesmod.module.Module;
import keystrokesmod.module.setting.impl.ButtonSetting;
import keystrokesmod.module.setting.impl.LiteralSubMode;
import keystrokesmod.module.setting.impl.ModeValue;
import keystrokesmod.module.setting.utils.ModeOnly;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import keystrokesmod.eventbus.annotations.EventListener;
import net.minecraftforge.fml.common.network.internal.FMLProxyPacket;
import org.jetbrains.annotations.NotNull;


public class ClientSpoofer extends Module {
    public static String customBrand = null;

    private final ModeValue mode;
    private final ButtonSetting noForge;
    private final ButtonSetting cancelForgePacket;

    public ClientSpoofer() {
        super("ClientSpoofer", category.exploit);
        this.registerSetting(mode = new ModeValue("Mode", this)
                .add(new LiteralSubMode("Vanilla", this))
                .add(new LiteralSubMode("Forge", this))
                .add(new LiteralSubMode("Lunar", this))
                .add(new LiteralSubMode("Badlion", this))
                .add(new LiteralSubMode("RavenXD", this))
                .add(new LiteralSubMode("Cancel", this))
                .add(new LiteralSubMode("null", this))
                .add(new LiteralSubMode("Custom", this))
        );
        this.registerSetting(noForge = new ButtonSetting("No forge", false, new ModeOnly(mode, "Forge")));
        this.registerSetting(cancelForgePacket = new ButtonSetting("Cancel FMLProxyPacket", false));
    }

    @EventListener
    public void onSendPacket(@NotNull SendPacketEvent event) {
        if (event.getPacket() instanceof FMLProxyPacket
                && cancelForgePacket.isToggled()) {
            event.cancel();
        }
        if (event.getPacket() instanceof C17PacketCustomPayload
                && mode.getSelected().getPrettyName().equals("Cancel")) {
            event.cancel();
        }
    }

    @EventListener
    public void onClientBrand(@NotNull ClientBrandEvent event) {
        String brand = event.getBrand();

        switch (mode.getSelected().getPrettyName()) {
            case "Vanilla":
                brand = "vanilla";
                break;
            case "Forge":
                if (noForge.isToggled()) {
                    brand = "fml";
                } else {
                    brand = "fml,forge";
                }
                break;
            case "Lunar":
                brand = "lunarclient:v2.18.3-2451";
                break;
            case "Badlion":
                brand = "badlion";
                break;
            case "RavenXD":
                brand = "ravenxd";
                break;
            case "null":
                brand = null;
                break;
            case "Custom":
                brand = customBrand;
                break;
        }

        event.setBrand(brand);
    }
}
