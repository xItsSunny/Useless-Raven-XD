package keystrokesmod.module.impl.exploit;

import keystrokesmod.Client;
import keystrokesmod.event.network.SendPacketEvent;
import keystrokesmod.module.Module;
import keystrokesmod.module.ModuleManager;
import keystrokesmod.module.setting.impl.ButtonSetting;
import keystrokesmod.module.setting.impl.SliderSetting;
import keystrokesmod.utility.PacketUtils;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import keystrokesmod.eventbus.annotations.EventListener;
import org.jetbrains.annotations.NotNull;

import java.util.concurrent.TimeUnit;

public class PingSpoof extends Module {
    private final SliderSetting latency;
    private final ButtonSetting cancelPacket;
    private final ButtonSetting sendAllOnDisabled;

    public PingSpoof() {
        super("PingSpoof", category.exploit);
        this.registerSetting(latency = new SliderSetting("Latency", 100, 0, 1000, 10, "ms"));
        this.registerSetting(cancelPacket = new ButtonSetting("Cancel packet", false));
        this.registerSetting(sendAllOnDisabled = new ButtonSetting("Send all on disabled", false));
    }

    @EventListener(priority = -2)
    public void onSendPacket(@NotNull SendPacketEvent event) {
        if (event.isCancelled()) return;

        final Packet<?> packet = event.getPacket();
        if (packet instanceof C0FPacketConfirmTransaction || packet instanceof C00PacketKeepAlive || packet instanceof C13PacketPlayerAbilities || packet instanceof C17PacketCustomPayload) {
            event.cancel();
            if (!cancelPacket.isToggled()) {
                Client.getExecutor().schedule(() -> {
                    if (!cancelPacket.isToggled() && (sendAllOnDisabled.isToggled() || ModuleManager.pingSpoof.isEnabled())) {
                        PacketUtils.sendPacketNoEvent(packet);
                    }
                }, (long) latency.getInput(), TimeUnit.MILLISECONDS);
            }
        }
    }

    @Override
    public String getInfo() {
        return latency.getInput() + "ms";
    }
}
