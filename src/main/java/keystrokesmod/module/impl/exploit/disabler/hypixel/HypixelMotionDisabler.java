package keystrokesmod.module.impl.exploit.disabler.hypixel;

import keystrokesmod.event.player.PreMotionEvent;
import keystrokesmod.event.network.ReceivePacketEvent;
import keystrokesmod.event.world.WorldChangeEvent;
import keystrokesmod.module.ModuleManager;
import keystrokesmod.module.impl.client.Notifications;
import keystrokesmod.module.impl.exploit.disabler.HypixelDisabler;
import keystrokesmod.module.setting.impl.ButtonSetting;
import keystrokesmod.module.setting.impl.SubMode;
import keystrokesmod.utility.MoveUtil;
import keystrokesmod.utility.Utils;
import keystrokesmod.utility.render.Animation;
import keystrokesmod.utility.render.Easing;
import keystrokesmod.utility.render.progress.Progress;
import keystrokesmod.utility.render.progress.ProgressManager;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import keystrokesmod.eventbus.annotations.EventListener;
import keystrokesmod.event.render.Render2DEvent;
import org.jetbrains.annotations.NotNull;

public class HypixelMotionDisabler extends SubMode<HypixelDisabler> {
    private static boolean isFinished = false;
    private final Animation animation = new Animation(Easing.EASE_OUT_CIRC, 500);
    private final Progress progress = new Progress("Disabler");
    private final ButtonSetting hypixelCheck;
    private int flagged;
    private int offGroundTicks = 0;

    public HypixelMotionDisabler(String name, @NotNull HypixelDisabler parent) {
        super(name, parent);
        this.registerSetting(hypixelCheck = new ButtonSetting("Hypixel check", true));
    }

    public static boolean isDisabled() {
        if (!ModuleManager.disabler.isEnabled()) return false;
        if (!(ModuleManager.disabler.mode.getSelected() instanceof HypixelDisabler)) return false;
        if (!(((HypixelDisabler) ModuleManager.disabler.mode.getSelected()).motion.getSelected() instanceof HypixelMotionDisabler))
            return false;
        return isFinished;
    }

    @EventListener
    public void onPreMotion(PreMotionEvent event) {
        if (isFinished || !Utils.nullCheck() || mc.thePlayer.ticksExisted < 20) return;
        if (hypixelCheck.isToggled() && (!Utils.isHypixel() || Utils.isLobby())) {
            ProgressManager.remove(progress);
            return;
        }
        if (mc.thePlayer.onGround) {
            MoveUtil.jump();
        } else if (offGroundTicks >= 9) {
            if (offGroundTicks % 2 == 0) {
                event.setPosZ(event.getPosZ() + Utils.randomizeDouble(0.09, 0.12));  // 0.095
            }

            mc.thePlayer.motionX = mc.thePlayer.motionY = mc.thePlayer.motionZ = 0.0;
        }
    }

    @EventListener
    public void onReceivePacket(@NotNull ReceivePacketEvent event) {
        if (event.getPacket() instanceof S08PacketPlayerPosLook && !isFinished) {
            flagged++;
            if (this.flagged == 20) {
                isFinished = true;
                flagged = 0;
                Notifications.sendNotification(Notifications.NotificationTypes.INFO, "WatchDog Motion is disable.");
                isFinished = true;
                ProgressManager.remove(progress);
            }
        }
    }

    @EventListener
    public void onWorldChange(WorldChangeEvent event) {
        isFinished = false;
        this.flagged = 0;
        animation.setValue(flagged);
        if (hypixelCheck.isToggled() && (!Utils.isHypixel() || Utils.isLobby())) {
            ProgressManager.remove(progress);
        } else {
            ProgressManager.add(progress);
        }
    }

    @Override
    public void onUpdate() {
        if (mc.thePlayer.onGround)
            offGroundTicks = 0;
        else
            offGroundTicks++;
    }

    @Override
    public void onDisable() {
        isFinished = false;
        offGroundTicks = 0;
        ProgressManager.remove(progress);
    }

    @EventListener
    public void onRender(Render2DEvent event) {
        if (!isFinished) {
            animation.run(flagged);

            progress.setText("Disabler " + (int) (animation.getValue() / 20.0 * 100) + "%");
            progress.setProgress(Math.min(animation.getValue() / 20.0, 1));
        }
    }

    @Override
    public void onEnable() {
        onWorldChange(null);
    }
}
